{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","Cards","data","undefined","Object","keys","length","processedData","Global","Countries","Date","country","confirmed","TotalConfirmed","recovered","TotalRecovered","deaths","TotalDeaths","lastUpdate","i","countryInfo","Slug","window","processData","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","toDateString","url2","fetchData","a","axios","get","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchDailyDataForCountry","fetchedData","Confirmed","Deaths","Recovered","pop","push","curr","comp","fetchCountries","fetchedCountires","name","Country","slug","sort","b","localeCompare","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","labels","datasets","label","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","value","key","App","state","summaryData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e155619e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3fEzq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2ZNoY\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","import React from \"react\";\r\nimport {Card, CardContent, Typography, Grid} from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst processData = (Global, Countries, Date, country) => {\r\n    if (country === undefined || country === \"\") {\r\n        return {\r\n            confirmed: Global.TotalConfirmed,\r\n            recovered: Global.TotalRecovered,\r\n            deaths: Global.TotalDeaths,\r\n            lastUpdate: Date\r\n        };\r\n    }\r\n\r\n    for (let i = 0; i < Countries.length; i++) {\r\n        let countryInfo = Countries[i];\r\n        if (countryInfo.Slug === country) {\r\n            return {\r\n                confirmed: countryInfo.TotalConfirmed,\r\n                recovered: countryInfo.TotalRecovered,\r\n                deaths: countryInfo.TotalDeaths,\r\n                lastUpdate: countryInfo.Date\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        confirmed: 0,\r\n        recovered: 0,\r\n        deaths: 0,\r\n        lastUpdate: new window.Date()\r\n    };\r\n}\r\n\r\nconst Cards = (data) => {\r\n    if (data.data === undefined || Object.keys(data.data).length === 0) {\r\n        return 'Loading ...';\r\n    }\r\n    const processedData = processData(data.data.Global, data.data.Countries, data.data.Date, data.country);\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify={\"center\"}>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color={\"textSecondary\"} gutterBottom>Infected</Typography>\r\n                        <Typography variant={\"h5\"}>\r\n                            <CountUp start={0} end={processedData.confirmed} duration={2.5} separator={\",\"} />\r\n                        </Typography>\r\n                        <Typography color={\"textSecondary\"}>{new Date(processedData.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant={\"body2\"}>Number of active cases for COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color={\"textSecondary\"} gutterBottom>Recovered</Typography>\r\n                        <Typography variant={\"h5\"}>\r\n                            <CountUp start={0} end={processedData.recovered} duration={2.5} separator={\",\"} />\r\n                        </Typography>\r\n                        <Typography color={\"textSecondary\"}>{new Date(processedData.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant={\"body2\"}>Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color={\"textSecondary\"} gutterBottom>Deaths</Typography>\r\n                        <Typography variant={\"h5\"}>\r\n                            <CountUp start={0} end={processedData.deaths} duration={2.5} separator={\",\"} />\r\n                        </Typography>\r\n                        <Typography color={\"textSecondary\"}>{new Date(processedData.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant={\"body2\"}>Number of deaths caused COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\nconst url2 = 'https://api.covid19api.com';\r\n\r\nexport const fetchData = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url2}/summary`);\r\n        return data;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return undefined;\r\n    }\r\n}\r\n\r\nconst fetchDailyData = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n\r\n        return data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            recovered: 0,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }));\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyDataForCountry = async (country) => {\r\n    try {\r\n        if (!country) {\r\n            return fetchDailyData();\r\n        }\r\n        const {data} = await axios.get(`${url2}/dayone/country/${country}`);\r\n\r\n\r\n        const fetchedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.Confirmed,\r\n            deaths: dailyData.Deaths,\r\n            recovered: dailyData.Recovered,\r\n            date: dailyData.Date\r\n        }));\r\n\r\n        fetchedData.pop();\r\n        let processedData = [];\r\n\r\n        for (let i = 0; i < fetchedData.length; i++) {\r\n            if (processedData.length === 0) {\r\n                processedData.push(fetchedData[i]);\r\n                continue;\r\n            }\r\n            const curr = fetchedData[i], comp = processedData[processedData.length - 1];\r\n            if (comp.date === curr.date) {\r\n                comp.confirmed += curr.confirmed;\r\n                comp.recovered += curr.recovered;\r\n                comp.deaths += curr.deaths;\r\n            } else {\r\n                processedData.push(fetchedData[i]);\r\n            }\r\n        }\r\n\r\n        return processedData;\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url2}/countries`);\r\n        const fetchedCountires = data.map((country) => ({\r\n            name: country.Country,\r\n            slug: country.Slug\r\n        }));\r\n        return fetchedCountires.sort((a, b) => a.name.localeCompare(b.name));\r\n    } catch (e) {\r\n\r\n    }\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport {fetchDailyDataForCountry} from \"../../api\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyDataForCountry(country));\r\n        };\r\n        fetchAPI();\r\n    }, [country]);\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n            ? (\r\n                <Line\r\n                    data={{\r\n                        labels: dailyData.map(({date}) => date),\r\n                        datasets: [{\r\n                            data: dailyData.map(({confirmed}) => confirmed),\r\n                            label: 'Infected',\r\n                            borderColor: '#3333ff',\r\n                            fill: true\r\n                        }, {\r\n                            data: dailyData.map(({recovered}) => recovered),\r\n                            label: 'Recovered',\r\n                            borderColor: 'rgba(0, 255, 0, 0.5)',\r\n                            fill: true\r\n                        },\r\n                            {\r\n                            data: dailyData.map(({deaths}) => deaths),\r\n                            label: 'Deaths',\r\n                            borderColor: 'rgba(255, 0, 0, 0.5)',\r\n                            fill: true\r\n                        }],\r\n                    }}\r\n                />\r\n            ) : null\r\n\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, {useState, useEffect} from \"react\";\r\nimport {NativeSelect, FormControl} from \"@material-ui/core\";\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport {fetchCountries} from \"../../api\";\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue={\"\"} onChange={(e => handleCountryChange(e.target.value))}>\r\n                <option value={\"\"}>Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country.slug}>{country.name}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\n\nimport Cards from \"./components/Cards/Cards\";\nimport Chart from \"./components/Chart/Chart\";\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\nimport styles from \"./App.module.css\";\nimport {fetchData} from \"./api\";\n\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component {\n    state = {\n        summaryData: {},\n        country: ''\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        this.setState({summaryData: fetchedData})\n    }\n\n    handleCountryChange = async (country) => {\n        this.setState({country: country})\n    }\n\n    render() {\n        const {summaryData, country} = this.state;\n\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} src={coronaImage} alt={\"COVID-19\"}/>\n                <Cards data={summaryData} country={country}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart country={country}/>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__BA2do\",\"card\":\"Cards_card__3gOEa\",\"infected\":\"Cards_infected__3nkaT\",\"recovered\":\"Cards_recovered__1vPBB\",\"deaths\":\"Cards_deaths__33Q4S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2FleM\",\"image\":\"App_image__10E1E\"};"],"sourceRoot":""}